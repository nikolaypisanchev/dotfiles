let mapleader = " "

nnoremap <leader>ev :e ~/.vim/vimrc<cr>
nnoremap <leader>sv :source ~/.vim/vimrc<cr>

" nmap <leader>cp :let @*=@%<CR>
nmap <leader>cp :let @+=@%<CR>

set ignorecase
set smartcase
set number rnu wrap list ruler
set laststatus=2
set incsearch
set autoindent
set shiftwidth=4
set backspace=indent,eol,start
set scrolloff=1
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
"set foldmethod=indent

set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//

set timeoutlen=300
set autoread

syntax enable
filetype plugin indent on

function! ShouldDoubleQuotes()
    function! IsAfterAllowedChar()
        let allowedChars = ['[', '=', '(', ' ', '{', 'f']
        if (index(allowedChars, GetPrevChar()) >= 0)
            return 1
        endif
    endfunction

    function! IsBeforeAllowedChar()
        let allowedChars = [']', ')', ' ', '}']
        if (index(allowedChars, GetNextChar()) >= 0 || IsEndOfLine())
            return 1
        endif
    endfunction

    return IsAfterAllowedChar() && IsBeforeAllowedChar()
endfunction

function! GetNextChar()
    return getline(".")[col(".")]
endfunction

function! GetPrevChar()
    return getline(".")[col(".") - 2]
endfunction

function! IsEndOfLine()
    return col(".") >= col("$")
endfunction

inoremap <expr> " ShouldDoubleQuotes() ? '""<left>' : '"'
inoremap <expr> ' ShouldDoubleQuotes() ? "''<left>" : "'"

":bro ol

nnoremap <leader>x "_d

nnoremap <leader>m :silent make\|redraw!\|cc<CR>
nnoremap <leader>e :cn<CR>

command! -nargs=1 Silent
\ | execute ':silent !'.<q-args>
\ | execute ':redraw!'

nnoremap <leader>jf :%!python -m json.tool<cr>

nnoremap <leader>a :b#<cr>

nnoremap <leader>y "*y

nnoremap <leader>' ysiw'
nnoremap <leader>" ysiw"
nnoremap <leader>rp Pldw
nnoremap <leader>' :execute "normal \<Plug>Ysurroundiw'"<cr>

:nnoremap <leader>cl :set number! rnu! list!<cr>
:nnoremap <leader>ss :mks! ~/.vim/sessions/work.vim<cr>
:nnoremap <leader>ls :source ~/.vim/sessions/work.vim<cr>

:nnoremap <leader>cda :cd ~/git/forms/forms/automation<cr>
:nnoremap <leader>cdf :cd ~/git/forms<cr>
:nnoremap <leader>cdv :cd ~/.vim<cr>
nnoremap <leader>ex :Ex<cr>

let g:python_highlight_all = 1
set background=dark
set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
"colorscheme solarized
"colorscheme palenight
"colorscheme onedark
"colorscheme space-vim-dark
colorscheme nord
"colorscheme pink-moon
hi Normal guibg=NONE ctermbg=NONE

let g:fzf_colors = {'bg': ['bg', 'CursorLine', 'Headline', 'Comment']}
let g:fzf_layout = { 'window': { 'width': 0.99, 'height': 0.99 } }

let g:fzf_preview_window = ['up:40%', 'ctrl-/']

let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit',
  \ }

set rtp+=~/.fzf
let g:fzf_command_prefix = 'Fzf'
nnoremap <leader>o :FzfFiles <cr>
nnoremap <leader>f :Rg <cr>
nnoremap <leader>/ :FzfLines <cr>
nnoremap <leader>b :FzfBuf <cr>
nnoremap <leader>M :FzfMarks <cr>
nnoremap <Leader>fw :FzfRg <C-R><C-W><CR>

"nnoremap <leader>ll i<C-x><C-l>
"inoremap <C-l> <plug>(fzf-complete-line)

inoremap <expr> <c-l> fzf#vim#complete(fzf#wrap({
  \ 'prefix': '^.*$',
  \ 'source': 'rg -n ^ --color always',
  \ 'options': '--ansi --delimiter : --nth 3..',
  \ 'reducer': { lines -> join(split(lines[0], ':\zs')[2:], '') }}))

command! -bang -nargs=* Rg
            \ call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case -g '!submissions_processing_results' -g '!api_rest_results' ".shellescape(<q-args>), 1, fzf#vim#with_preview({'options': '--delimiter : --nth 4.. --expect=ctrl-x', '_action': {'ctrl-x': 'split'}}, 'up:40%'), <bang>1)

:nnoremap <leader>w :w <cr>
:nnoremap <leader>q :q <cr>

" gui' -> changea ll to lowercase
"
"
